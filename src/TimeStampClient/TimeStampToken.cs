/*
*  Copyright 2016-2019 Disig a.s.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*/

/*
*  Written by:
*  Marek KLEIN <kleinmrk@gmail.com>
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace Disig.TimeStampClient
{
    /// <summary>
    /// Encapsulates information from time stamp token.
    /// </summary>
    public class TimeStampToken
    {
        /// <summary>
        /// Bouncy castle representation of time stamp token
        /// </summary>
        internal Org.BouncyCastle.Tsp.TimeStampToken timeStampToken;

        /// <summary>
        /// DER encoded time stamp token
        /// </summary>
        internal byte[] EncodedToken;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeStampToken"/> class.
        /// </summary>
        /// <param name="encodedToken">DER encoded time stamp token</param>
        public TimeStampToken(byte[] encodedToken)
        {
            if (null == encodedToken)
            {
                throw new ArgumentNullException("encodedToken");
            }

            EncodedToken = encodedToken;
            timeStampToken = new Org.BouncyCastle.Tsp.TimeStampToken(new Org.BouncyCastle.Cms.CmsSignedData(encodedToken));
            this.MessageImprint = new MsgImprint(this.timeStampToken.TimeStampInfo.GetMessageImprintDigest(), this.timeStampToken.TimeStampInfo.MessageImprintAlgOid);

            X509Certificate2 tsaCert = null;
            Org.BouncyCastle.Cms.SignerID signerId = this.timeStampToken.SignerID;
            Org.BouncyCastle.Cms.CmsSignedData cmsSignedData = new Org.BouncyCastle.Cms.CmsSignedData(this.timeStampToken.GetEncoded());
            ICollection signerCerts = cmsSignedData.GetCertificates("COLLECTION").GetMatches(this.timeStampToken.SignerID);

            foreach (Org.BouncyCastle.X509.X509Certificate cert in signerCerts)
            {
                tsaCert = new X509Certificate2(cert.GetEncoded());
            }
            this.TsaInformation = new TsaId(signerId, tsaCert);
        }

        /// <summary>
        /// Information about time stamp authority.
        /// </summary>
        public TsaId TsaInformation
        {
            get;
            set;
        }

        /// <summary>
        /// Returns DER encoded time-stamp token.
        /// </summary>
        /// <returns>Byte array containing DER encoded time-stamp token.</returns>
        public byte[] ToByteArray()
        {
            return this.EncodedToken;
        }

        /// <summary>
        /// Gets the hash of the data to be time-stamped.
        /// </summary>
        public byte[] HashedMessage
        {
            get
            {
                return this.MessageImprint.HashedMessage;
            }
        }

        /// <summary>
        /// Gets the hash algorithm identifier.
        /// Must correspond to hash algorithm identifier requested in the request.
        /// </summary>
        public string HashAlgorithm
        {
            get
            {
                return this.MessageImprint.HashAlgorithm;
            }
        }

        /// <summary>
        /// Gets Nonce, large random number with a high probability that it is generated by the client only once.
        /// Corresponds to nonce presented in the request.
        /// Prevents replay attack.
        /// </summary>
        public byte[] Nonce
        {
            get
            {
                if (null != this.timeStampToken.TimeStampInfo.Nonce)
                    return this.timeStampToken.TimeStampInfo.Nonce.ToByteArray();
                return null;
            }
        }

        /// <summary>
        /// Gets security policy under which the token was created.
        /// </summary>
        public string PolicyOid
        {
            get
            {
                return this.timeStampToken.TimeStampInfo.Policy;
            }
        }

        /// <summary>
        /// Gets serial number of a time stamp.
        /// </summary>
        public byte[] SerialNumber
        {
            get
            {
                return this.timeStampToken.TimeStampInfo.SerialNumber.ToByteArray();
            }
        }

        /// <summary>
        /// Gets time from time stamp token.
        /// </summary>
        public DateTime Time
        {
            get
            {
                return this.timeStampToken.TimeStampInfo.GenTime;
            }
        }

        /// <summary>
        /// Gets the hash algorithm identifier and the hash value of the data to be time-stamped.
        /// </summary>
        internal MsgImprint MessageImprint
        {
            get;
            private set;
        }

    }
}
